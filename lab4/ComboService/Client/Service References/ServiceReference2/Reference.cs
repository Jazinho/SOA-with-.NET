//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference2 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/ReviewsAndPeopleService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IReviewService")]
    public interface IReviewService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetAllReviews", ReplyAction="http://tempuri.org/IReviewService/GetAllReviewsResponse")]
        Model.Review[] GetAllReviews();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetAllReviews", ReplyAction="http://tempuri.org/IReviewService/GetAllReviewsResponse")]
        System.Threading.Tasks.Task<Model.Review[]> GetAllReviewsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/CreateReview", ReplyAction="http://tempuri.org/IReviewService/CreateReviewResponse")]
        int CreateReview(Model.Review Review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/CreateReview", ReplyAction="http://tempuri.org/IReviewService/CreateReviewResponse")]
        System.Threading.Tasks.Task<int> CreateReviewAsync(Model.Review Review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetReview", ReplyAction="http://tempuri.org/IReviewService/GetReviewResponse")]
        Model.Review GetReview(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetReview", ReplyAction="http://tempuri.org/IReviewService/GetReviewResponse")]
        System.Threading.Tasks.Task<Model.Review> GetReviewAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/UpdateReview", ReplyAction="http://tempuri.org/IReviewService/UpdateReviewResponse")]
        Model.Review UpdateReview(Model.Review Review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/UpdateReview", ReplyAction="http://tempuri.org/IReviewService/UpdateReviewResponse")]
        System.Threading.Tasks.Task<Model.Review> UpdateReviewAsync(Model.Review Review);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/DeleteReview", ReplyAction="http://tempuri.org/IReviewService/DeleteReviewResponse")]
        bool DeleteReview(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/DeleteReview", ReplyAction="http://tempuri.org/IReviewService/DeleteReviewResponse")]
        System.Threading.Tasks.Task<bool> DeleteReviewAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetAllPeople", ReplyAction="http://tempuri.org/IReviewService/GetAllPeopleResponse")]
        Model.Person[] GetAllPeople();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetAllPeople", ReplyAction="http://tempuri.org/IReviewService/GetAllPeopleResponse")]
        System.Threading.Tasks.Task<Model.Person[]> GetAllPeopleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/CreatePerson", ReplyAction="http://tempuri.org/IReviewService/CreatePersonResponse")]
        int CreatePerson(Model.Person Person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/CreatePerson", ReplyAction="http://tempuri.org/IReviewService/CreatePersonResponse")]
        System.Threading.Tasks.Task<int> CreatePersonAsync(Model.Person Person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetPerson", ReplyAction="http://tempuri.org/IReviewService/GetPersonResponse")]
        Model.Person GetPerson(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetPerson", ReplyAction="http://tempuri.org/IReviewService/GetPersonResponse")]
        System.Threading.Tasks.Task<Model.Person> GetPersonAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/UpdatePerson", ReplyAction="http://tempuri.org/IReviewService/UpdatePersonResponse")]
        Model.Person UpdatePerson(Model.Person Person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/UpdatePerson", ReplyAction="http://tempuri.org/IReviewService/UpdatePersonResponse")]
        System.Threading.Tasks.Task<Model.Person> UpdatePersonAsync(Model.Person Person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/DeletePerson", ReplyAction="http://tempuri.org/IReviewService/DeletePersonResponse")]
        bool DeletePerson(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/DeletePerson", ReplyAction="http://tempuri.org/IReviewService/DeletePersonResponse")]
        System.Threading.Tasks.Task<bool> DeletePersonAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetData", ReplyAction="http://tempuri.org/IReviewService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetData", ReplyAction="http://tempuri.org/IReviewService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IReviewService/GetDataUsingDataContractResponse")]
        Client.ServiceReference2.CompositeType GetDataUsingDataContract(Client.ServiceReference2.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReviewService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IReviewService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference2.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference2.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReviewServiceChannel : Client.ServiceReference2.IReviewService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReviewServiceClient : System.ServiceModel.ClientBase<Client.ServiceReference2.IReviewService>, Client.ServiceReference2.IReviewService {
        
        public ReviewServiceClient() {
        }
        
        public ReviewServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReviewServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReviewServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReviewServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Model.Review[] GetAllReviews() {
            return base.Channel.GetAllReviews();
        }
        
        public System.Threading.Tasks.Task<Model.Review[]> GetAllReviewsAsync() {
            return base.Channel.GetAllReviewsAsync();
        }
        
        public int CreateReview(Model.Review Review) {
            return base.Channel.CreateReview(Review);
        }
        
        public System.Threading.Tasks.Task<int> CreateReviewAsync(Model.Review Review) {
            return base.Channel.CreateReviewAsync(Review);
        }
        
        public Model.Review GetReview(int Id) {
            return base.Channel.GetReview(Id);
        }
        
        public System.Threading.Tasks.Task<Model.Review> GetReviewAsync(int Id) {
            return base.Channel.GetReviewAsync(Id);
        }
        
        public Model.Review UpdateReview(Model.Review Review) {
            return base.Channel.UpdateReview(Review);
        }
        
        public System.Threading.Tasks.Task<Model.Review> UpdateReviewAsync(Model.Review Review) {
            return base.Channel.UpdateReviewAsync(Review);
        }
        
        public bool DeleteReview(int Id) {
            return base.Channel.DeleteReview(Id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteReviewAsync(int Id) {
            return base.Channel.DeleteReviewAsync(Id);
        }
        
        public Model.Person[] GetAllPeople() {
            return base.Channel.GetAllPeople();
        }
        
        public System.Threading.Tasks.Task<Model.Person[]> GetAllPeopleAsync() {
            return base.Channel.GetAllPeopleAsync();
        }
        
        public int CreatePerson(Model.Person Person) {
            return base.Channel.CreatePerson(Person);
        }
        
        public System.Threading.Tasks.Task<int> CreatePersonAsync(Model.Person Person) {
            return base.Channel.CreatePersonAsync(Person);
        }
        
        public Model.Person GetPerson(int Id) {
            return base.Channel.GetPerson(Id);
        }
        
        public System.Threading.Tasks.Task<Model.Person> GetPersonAsync(int Id) {
            return base.Channel.GetPersonAsync(Id);
        }
        
        public Model.Person UpdatePerson(Model.Person Person) {
            return base.Channel.UpdatePerson(Person);
        }
        
        public System.Threading.Tasks.Task<Model.Person> UpdatePersonAsync(Model.Person Person) {
            return base.Channel.UpdatePersonAsync(Person);
        }
        
        public bool DeletePerson(int Id) {
            return base.Channel.DeletePerson(Id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePersonAsync(int Id) {
            return base.Channel.DeletePersonAsync(Id);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public Client.ServiceReference2.CompositeType GetDataUsingDataContract(Client.ServiceReference2.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference2.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference2.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
